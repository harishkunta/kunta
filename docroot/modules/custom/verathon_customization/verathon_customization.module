<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\node\Entity\Node;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Html;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_css_alter().
 */
function verathon_customization_h5p_styles_alter(&$styles, $libraries, $mode) {
  $styles[] = (object) array(
    // Path relative to drupal root
    'path' => drupal_get_path('module', 'verathon_customization') . '/css/custom-h5p-overrides.css',
    // Cache buster
    'version' => '?ver=1',
  );
}

/**
 * Implements hook_js_alter().
 */
function verathon_customization_h5p_scripts_alter(&$scripts, $libraries, $mode) {
  $scripts[] = (object) array(
    // Path relative to drupal root
    'path' => drupal_get_path('module', 'verathon_customization') . '/js/custom-h5p-overrides.js',
    // Cache buster
    'version' => '?ver=1',
  );
}

/**
 * Implements hook_form_alter().
 */
function verathon_customization_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'views_exposed_form' && isset($form['field_product_line'])) {
    if ('views-exposed-form-et-search-block-search' === $form['#id']) {
      // Rename the All option label.
      $form['field_product_line']['#options']['All'] = t('All Products');
    }
    if ('views-exposed-form-acquia-search-search' === $form['#id']) {
      // Rename the All option label.
      $form['field_product_line']['#options']['All'] = t('All');
      $form['#attached']['library'][] = 'verathon_customization/verathon_search';
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function verathon_customization_preprocess_html(array &$variables) {
  $current_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();

  if ($current_theme !== 'cohesion_theme') {
    return;
  }

  $variables['#attached']['library'][] =  'verathon_customization/global-styling';

  $pageCategory = $siteSection = NULL;
  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);
  $path_args = array_filter($path_args);
  $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
  $alias_args = explode('/', $alias);
  $alias_args = array_filter($alias_args);
  $siteSection = $alias_args[1] ?? '';

  if ($path_args[1] == 'node' && is_numeric($path_args[2])) {
    $node = Node::load($path_args[2]);
    $pageCategory = ucwords($node->bundle());
    if ($node->bundle() == 'page') {
      $is_product = $node->get('field_is_product')->value;
      if (!empty($is_product) && $is_product == 1) {
        $pageCategory = 'Product';
      }
    }
  }
  else {
    $pageCategory = 'sitepage';
  }

  $datalayer = [
    '#tag' => 'script',
    '#value' => Markup::create("dataLayer = [{
      'pageCategory': '$pageCategory',
      'siteSection' : '$siteSection',
    }];"),
  ];

  $telephone = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'format-detection',
      'content' => 'telephone=no'
    ],
  ];

  $xuacompatible = [
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];

  $variables['page']['#attached']['html_head'][] = [$datalayer, 'dataLayer'];
  $variables['page']['#attached']['html_head'][] = [$telephone, 'telephone'];
  $variables['page']['#attached']['html_head'][] = [$xuacompatible, 'x-ua-compatible'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function verathon_customization_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ( !empty($form) &&  $form['#id'] === 'views-exposed-form-product-support-cards-eol-devices' ) {
    $form['#attributes']['class'][] = Html::cleanCssIdentifier('coh-style-eol-product-documentation-list');
    $form['#attributes']['class'][] = Html::cleanCssIdentifier('coh-container-boxed');
    $form = change_labels($form);
  }
  if ( !empty($form) &&  $form['#id'] === 'views-exposed-form-product-support-cards-product-documentation' ) {
    $form['#attributes']['class'][] = Html::cleanCssIdentifier('coh-style-product-documentation-form-and-list');
    $form = change_labels($form);
  }
}

/**
 * Function to change the title value from a view
 */
function changetitlevalue($title) {
  return (strtolower(preg_replace('/[[:space:]]+/', '-', htmlspecialchars_decode($title))));
}

/**
 * Implements hook_preprocess_views_view_field()
 * Preprocess vars for views-view-field.tpl.php.
 */
function verathon_customization_preprocess_views_view_field(&$vars) {
  if ($vars['view']->current_display == 'product_support_card' && $vars['field']->options['id'] == 'title') {
    $title_value = $vars['field']->original_value;
    $vars['output'] = changetitlevalue($title_value);
    $vars['field']->last_render = $vars['output'];
  }
  if ($vars['view']->current_display == 'legacy_product_list' && $vars['field']->options['id'] == 'title') {
    $title_value = $vars['field']->original_value;
    $vars['output'] = changetitlevalue($title_value);
    $vars['field']->last_render = $vars['output'];
  }
}

/**
 * Change Labels for the default value in the exposed form select list
 */
function change_labels($form) {
  if (isset($form['lang'])) {
    $form['lang']['#options']['All'] = t('All Languages');
  }
  if (isset($form['doc_type'])) {
    $form['doc_type']['#options']['All'] = t('All Documents');
  }
  return $form;
}

/**
 * Implements hook_views_pre_render().
 */
function verathon_customization_views_pre_render(ViewExecutable $view) {
  if ($view->name == 'acquia_search') {

    // Get array of results from view object.
    $results = $view->result;

    // Initialize empty array that we will use to save results
    // grouped by content type.
    $grouped_results = array();

    // Each $result is an object within the $results array.
    foreach ($results as $result) {
      $content_type = $result->node_type;

      // Rank content types in order to be sorted.
      // Ranking closest to 1 will be listed first.
      // Ranking with highest number will be listed last.
      switch ($content_type) {
        case 'product_documentation':
          $ranking = 1;
          break;
        case 'instructional_videos':
          $ranking = 10;
          break;
        case 'clinical_publications':
          $ranking = 20;
          break;
        case 'article':
          $ranking = 30;
          break;
        case 'news':
          $ranking = 40;
          break;
        case 'page':
          $ranking = 50;
          break;     
        default:
          $ranking = 200;
      }

      // Add result to new array where results are grouped by ranking.
      $grouped_results[$ranking][] = $result;
    }

    // Sort results by ranking.
    ksort($grouped_results);

    // Now initialize new array that will save search results in order per ranking
    // but without results being grouped by ranking.
    $ranked_results = array();

    // Reorganize $grouped_results so $results are no longer grouped
    // just listed in order of ranking.
    foreach ($grouped_results as $ranking) {
      foreach ($ranking as $result) {
        $ranked_results[] = $result;
      }
    }

    // Set views results array to new ranked results array.
    $view->result = $ranked_results;
  }
}
